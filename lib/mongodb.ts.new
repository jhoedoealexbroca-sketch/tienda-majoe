import mongoose from 'mongoose';

if (!process.env.MONGODB_URI) {
  throw new Error('Please define the MONGODB_URI environment variable inside .env');
}

const MONGODB_URI = process.env.MONGODB_URI;

interface MongooseCache {
  conn: typeof mongoose | null;
  promise: Promise<typeof mongoose> | null;
}

declare global {
  var mongooseCache: MongooseCache | undefined;
}

const cached = global.mongooseCache || { conn: null, promise: null };

if (!global.mongooseCache) {
  global.mongooseCache = cached;
}

async function dbConnect() {
  try {
    if (cached.conn) {
      console.log('Usando conexi贸n existente a MongoDB');
      return cached.conn;
    }

    if (!cached.promise) {
      console.log('Iniciando nueva conexi贸n a MongoDB...');
      const opts = {
        maxPoolSize: 10,
        serverSelectionTimeoutMS: 5000,
        socketTimeoutMS: 45000,
        bufferCommands: false,
      };

      cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
        console.log('Conexi贸n a MongoDB establecida exitosamente');
        mongoose.set('debug', process.env.NODE_ENV === 'development');
        return mongoose;
      }).catch((error) => {
        console.error('Error al conectar con MongoDB:', error);
        cached.promise = null;
        throw error;
      });
    }

    try {
      cached.conn = await cached.promise;
      return cached.conn;
    } catch (error) {
      cached.promise = null;
      throw error;
    }
  } catch (error) {
    console.error('Error en dbConnect:', error);
    cached.promise = null;
    cached.conn = null;
    throw new Error('No se pudo establecer la conexi贸n con MongoDB');
  }
}

export default dbConnect;