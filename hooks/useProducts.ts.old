import { useState, useEffect } from 'react'
import { Product } from '@/types'

export const useProducts = () => {
  const [products, setProducts] = useState<Product[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  // Cargar productos desde la API
  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true)
      setError(null)
      try {
        console.log('Iniciando carga de productos...')
        const response = await fetch('/api/products')
        if (!response.ok) {
          throw new Error('Error al cargar productos')
        }
        const data = await response.json()
        console.log('Productos cargados:', data.length)
        setProducts(data)
      } catch (err) {
        console.error('Error detallado al cargar productos:', err)
        setError(err instanceof Error ? err.message : 'Error al cargar productos')
        setProducts([])
      } finally {
        setLoading(false)
      }
    }

    fetchProducts()
  }, [])

  // Refrescar productos
  const refreshProducts = async () => {
    try {
      const response = await fetch('/api/products')
      if (!response.ok) throw new Error('Error al refrescar productos')
      const data = await response.json()
      setProducts(data)
    } catch (err) {
      setError('Error al refrescar productos')
      console.error('Error refreshing products:', err)
    }
  }

  // Agregar producto
  const handleAddProduct = async (productData: Omit<Product, 'id'>): Promise<Product | null> => {
    try {
      setError(null)
      const response = await fetch('/api/products', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(productData)
      })
      if (!response.ok) throw new Error('Error al agregar producto')
      const newProduct = await response.json()
      await refreshProducts()
      return newProduct
    } catch (err) {
      setError('Error al agregar producto')
      console.error('Error adding product:', err)
      return null
    }
  }

  // Actualizar producto
  const handleUpdateProduct = async (id: string, updates: Partial<Product>): Promise<Product | null> => {
    try {
      setError(null)
      const response = await fetch(`/api/products/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
      })
      if (!response.ok) throw new Error('Error al actualizar producto')
      const updatedProduct = await response.json()
      await refreshProducts()
      return updatedProduct
    } catch (err) {
      setError('Error al actualizar producto')
      console.error('Error updating product:', err)
      return null
    }
  }

  // Eliminar producto
  const handleDeleteProduct = async (id: string): Promise<boolean> => {
    try {
      setError(null)
      const response = await fetch(`/api/products/${id}`, {
        method: 'DELETE'
      })
      if (!response.ok) throw new Error('Error al eliminar producto')
      await refreshProducts()
      return true
    } catch (err) {
      setError('Error al eliminar producto')
      console.error('Error deleting product:', err)
      return false
    }
  }

  // Buscar productos
  const handleSearchProducts = (query: string, category?: 'men' | 'women' | 'kids-boys' | 'kids-girls'): Product[] => {
    try {
      let filteredProducts = products
      
      if (category) {
        filteredProducts = filteredProducts.filter(product => product.category === category)
      }
      
      if (query) {
        filteredProducts = filteredProducts.filter(product => 
          product.name.toLowerCase().includes(query.toLowerCase()) ||
          product.description.toLowerCase().includes(query.toLowerCase()) ||
          product.subcategory.toLowerCase().includes(query.toLowerCase())
        )
      }
      
      return filteredProducts
    } catch (err) {
      setError('Error en la bÃºsqueda')
      console.error('Error searching products:', err)
      return []
    }
  }

  // Buscar productos
  const handleSearchProducts = (query: string, category?: Product['category']): Product[] => {
    try {
      let filteredProducts = products
      
      if (category) {
        filteredProducts = filteredProducts.filter(product => product.category === category)
      }
      
      if (query) {
        const searchQuery = query.toLowerCase()
        filteredProducts = filteredProducts.filter(product => 
          product.name.toLowerCase().includes(searchQuery) ||
          product.description.toLowerCase().includes(searchQuery) ||
          product.subcategory.toLowerCase().includes(searchQuery)
        )
      }
      
      return filteredProducts
    } catch (err) {
      console.error('Error searching products:', err)
      return []
    }
  }

  return {
    products,
    loading,
    error,
    refreshProducts,
    addProduct: handleAddProduct,
    updateProduct: handleUpdateProduct,
    deleteProduct: handleDeleteProduct,
    searchProducts: handleSearchProducts
  }
}
